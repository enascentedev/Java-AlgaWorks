## ----- ----- -----

Estudos: Java
Author: Emanuel
Módulo 10 - Construtores, pacotes e visibilidade

-- ----- ----- -----
10.01. Criando e chamando construtores

Em Java, os construtores são métodos especiais usados para inicializar objetos. Eles têm o mesmo nome da classe e não possuem tipo de retorno.
Para chamar um construtor, use a palavra-chave new seguida do nome da classe e dos argumentos, se houverem. Construtores podem ser
sobrecarregados, permitindo diferentes formas de inicialização para objetos da mesma classe.
Chamar um construtor em Java significa instanciar um objeto dessa classe, ou seja, criar uma nova instância da classe usando o construtor
correspondente

-- ----- ----- -----
10.02. Construtores com parâmetros

Construtores com parâmetros em Java são usados para inicializar objetos com valores específicos passados como argumentos durante a instanciação.
Eles permitem que você defina o estado inicial do objeto com base nos valores fornecidos, facilitando a personalização e reutilização do código.
Ao criar um construtor com parâmetros, você pode definir diferentes formas de inicialização para objetos da mesma classe, oferecendo
flexibilidade no uso da classe em diferentes contextos.

-- ----- ----- -----
10.03. Sobrecarga de construtores

A sobrecarga de construtores em Java permite ter múltiplos construtores com o mesmo nome, mas com diferentes listas de parâmetros. Isso facilita
oferecer diversas formas de inicialização para objetos da mesma classe, adaptando-se às necessidades específicas dos usuários. É útil para
personalizar a criação de objetos com diferentes conjuntos de valores.

-- ----- ----- -----
10.04. Boas práticas - valide os argumentos de construtores

Para configurar a memória Heap da JVM em Java, utilizam-se argumentos de linha de comando: -Xms para o tamanho inicial da Heap, -Xmx para
o tamanho máximo, e -XX:MinHeapFreeRatio e -XX:MaxHeapFreeRatio para gerenciar a proporção de Heap livre após a coleta de lixo. O tamanho
inicial e máximo da nova geração podem ser definidos com -XX:NewSize e -XX:MaxNewSize, respectivamente. A partir do Java 8, o PermGen foi
substituído por Metaspace, ajustável com -XX:MetaSpaceSize e -XX:MaxMetaSpaceSize. Estes ajustes são essenciais para otimizar o desempenho
da aplicação e evitar a exaustão da memória.

-- ----- ----- -----
09.05. Garbage Collector

O Garbage Collector (GC) do Java automatiza a gestão da memória ao identificar e eliminar objetos que não são mais usados, liberando sua
memória para reutilização. Existem vários tipos de GC, incluindo Serial, Parallel, CMS, G1, ZGC e Shenandoah, cada um com características
distintas adequadas a diferentes tipos de aplicações e requisitos de performance. O GC trabalha em fases de marcação, limpeza e, em alguns
casos, compactação para reduzir a fragmentação da memória. Embora os desenvolvedores possam solicitar a execução do GC, a JVM tem a palavra
final sobre quando e como ele será executado. Compreender o funcionamento do GC é vital para otimizar aplicações e evitar problemas de
desempenho relacionados à memória.

-- ----- ----- -----
09.06. Inalcançabilidade de objetos

A inalcançabilidade de objetos em Java ocorre quando eles não possuem mais referências ativas no código, tornando-se candidatos para coleta
pelo Garbage Collector. Isso pode acontecer quando as referências são setadas para nulo, saem de escopo, são reatribuídas ou quando objetos
interconectados perdem referência com o resto da aplicação. A inalcançabilidade é crucial para o gerenciamento automático de memória da JVM,
permitindo que ela recupere a memória dos objetos que não são mais necessários, sem intervenção manual do programador.
fez alguns arquivos para teste de coleta de lixo de memória que estão nos arquivos.

-- ----- ----- -----
09.07. Quando esgota a Memória Heap - OutOfMemoryError
criou outro projeto chamado Teste_Memoria e nele criou um loop infinito pra estressar a memoria e depois analisamos a resposta.


09.08. Boas práticas - remova referências de objetos não usados













