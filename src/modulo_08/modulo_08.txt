## ----- ----- -----

Estudos: Java
Author: Emanuel
Módulo 08 - Trabalhando com arrays

-- ----- ----- -----
08.01. Declarando e inicializando arrays

tipos primitivos não recebem null e os wrappers resolvem isso
Em Java, tipos primitivos como int, double, char, etc., não podem receber valores null porque são tipos de dados básicos que armazenam valores diretos. Por outro lado, as classes wrapper em Java são classes que encapsulam um tipo primitivo dentro de um objeto, permitindo que esses tipos possam ser tratados como objetos. Uma vantagem disso é que objetos podem receber null, o que significa que as classes wrapper podem ser usadas para representar um tipo primitivo que pode ser null.
byte → Byte
short → Short
int → Integer
long → Long
float → Float
double → Double
char → Character
boolean → Boolean

-- ----- ----- -----
08.02. Acessando e atribuindo elementos de arrays

Nesta aula de Java sobre acesso e atribuição de elementos de arrays, aprendemos que arrays são estruturas de dados que armazenam uma
coleção de elementos do mesmo tipo. Usando índices, que começam do zero, podemos acessar e modificar os elementos do array. No exemplo,
alteramos os valores dos elementos nas posições 0 e 1 e calculamos a soma total dos elementos. Também acessamos um elemento do array
usando uma variável para determinar a posição.

-- ----- ----- -----
08.03. Iterando em arrays

Na aula sobre iteração em arrays em Java, vimos como percorrer arrays utilizando loops. Há diferentes maneiras de iterar sobre
um array: o loop for tradicional, utilizando um contador e o índice do array, e o loop for-each, que simplifica a iteração sem o uso
de índices. O cálculo de uma média a partir dos elementos de um array foi demonstrado como um caso de uso prático, onde a soma
dos elementos é dividida pelo número total de elementos.

-- ----- ----- -----
08.04. Transformando arrays em representações em string

Nesta aula de Java, vimos como converter arrays para sua representação em String usando a classe Arrays do pacote java.util.
O método Arrays.toString() é utilizado para obter uma representação textual de um array, facilitando a visualização dos seus elementos.
Isso é especialmente útil para imprimir ou registrar em log o conteúdo completo de um array de uma maneira legível.

-- ----- ----- -----
08.05. Ordenando arrays em ordem natural e reversa

No primeiro exemplo, a array notas é ordenada em ordem natural usando Arrays.sort(notas). No segundo exemplo, a array notas é
ordenada em ordem reversa usando Arrays.sort(notas, Comparator.reverseOrder()).
A diferença entre os códigos é que o segundo usa Integer em vez de int para permitir a ordenação reversa através de um Comparator.

-- ----- ----- -----
08.06. Criando arrays de objetos
A aula demonstra a criação de arrays de objetos em Java, usando classes Turma e Aluno. A Turma contém um array de Aluno, e no método main,
um objeto Turma é instanciado, com alunos sendo criados e atribuídos ao array. Isso exemplifica a manipulação de arrays de objetos,
incluindo a inicialização e a atribuição de valores.

-- ----- ----- -----
08.07. Iterando em arrays de objetos
nessa aula criei um arquivo chamado escola aonde fiz dois tipos de for no array de alunos o primiro tipo é o for completo e tradicional
o outro parecido com um forEach

08.08. Copiando e expandindo arrays
A aula aborda como essas operações são essenciais para manter a integridade dos dados e para adicionar elementos a arrays de forma segura.
Ao copiar, métodos como Arrays.copyOf() e o loop manual são usados para evitar alterações no array original. Para expandir, visto que
arrays em Java têm tamanho fixo, são utilizadas estruturas como ArrayList ou a criação de um novo array maior para acomodar mais
elementos. Um exemplo seria o uso de Arrays.copyOf(arrayOriginal, novoTamanho) para criar uma cópia expandida.

08.09. Removendo elementos de arrays
ele usou o método do java chamado arraycopy para copiar um novo array. System.arraycopy(Object src, int srcPos, Object dest, int destPos,
int length), onde src é o array de origem, srcPos a posição inicial nele, dest o array de destino, destPos a posição inicial no destino
, e length o número de elementos a serem copiados. É eficiente para manipulação de arrays, exigindo cuidado com os índices para evitar
exceções.

08.10. Desafio - arrays

08.11. Um pouco da ArrayList da Collections API
O ArrayList é uma classe da API Collections em Java que implementa uma lista redimensionável de objetos. Ao contrário dos arrays normais,
ArrayLists podem mudar de tamanho dinamicamente, facilitando a adição e remoção de elementos. Eles permitem armazenar elementos
duplicados e mantêm a ordem de inserção dos elementos. O acesso aos elementos é feito por índice, semelhante a arrays, oferecendo
operações de busca e atualização rápidas. Além disso, a classe ArrayList fornece métodos para operações como iteração, ordenação e
modificação em massa.

08.12. Desafio - ArrayList

08.13. Diagrama de classes - multiplicidade para arrays
mostrou como declarar arrays no diagrama UML

08.14. Boas práticas - retorne arrays ou coleções vazias no lugar de null
deu um exemplo modificado do desafio de cardapio,criou um métodod de consultar itens por preço que recebe dois parametros
prço minimo e preço máximo , jogou valores diferentes lá e mostrou algum valores quando retornam null(preço não encontrado nos paramteros)
a boa prática é se temos um método que retorna uma coleção sempre retorne uma instancia da coleção se não tiver nada pra retornar não vai retorna null e
sim vazio

08.15. Criando arrays multidimensionais
Em Java, arrays multidimensionais são essencialmente arrays de arrays, com cada dimensão adicionada representando um novo nível de array
dentro do anterior. Comumente usados para representar matrizes ou tabelas de dados, eles são declarados com múltiplos pares de colchetes,
como int[][] para um array bidimensional. A inicialização pode ser feita de forma estática com valores pré-definidos ou dinamicamente,
criando cada sub-array individualmente. Arrays multidimensionais são úteis para organizar dados complexos, mas cada sub-array pode ter
um tamanho diferente, permitindo estruturas flexíveis como arrays dentados.














