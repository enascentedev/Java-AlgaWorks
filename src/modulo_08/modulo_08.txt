## ----- ----- -----

Estudos: Java
Author: Emanuel
Módulo 08 - Trabalhando com arrays

-- ----- ----- -----
08.01. Declarando e inicializando arrays

tipos primitivos não recebem null e os wrappers resolvem isso
Em Java, tipos primitivos como int, double, char, etc., não podem receber valores null porque são tipos de dados básicos que armazenam valores diretos. Por outro lado, as classes wrapper em Java são classes que encapsulam um tipo primitivo dentro de um objeto, permitindo que esses tipos possam ser tratados como objetos. Uma vantagem disso é que objetos podem receber null, o que significa que as classes wrapper podem ser usadas para representar um tipo primitivo que pode ser null.
byte → Byte
short → Short
int → Integer
long → Long
float → Float
double → Double
char → Character
boolean → Boolean

-- ----- ----- -----
08.02. Acessando e atribuindo elementos de arrays

Nesta aula de Java sobre acesso e atribuição de elementos de arrays, aprendemos que arrays são estruturas de dados que armazenam uma
coleção de elementos do mesmo tipo. Usando índices, que começam do zero, podemos acessar e modificar os elementos do array. No exemplo,
alteramos os valores dos elementos nas posições 0 e 1 e calculamos a soma total dos elementos. Também acessamos um elemento do array
usando uma variável para determinar a posição.

-- ----- ----- -----
08.03. Iterando em arrays

Na aula sobre iteração em arrays em Java, vimos como percorrer arrays utilizando loops. Há diferentes maneiras de iterar sobre
um array: o loop for tradicional, utilizando um contador e o índice do array, e o loop for-each, que simplifica a iteração sem o uso
de índices. O cálculo de uma média a partir dos elementos de um array foi demonstrado como um caso de uso prático, onde a soma
dos elementos é dividida pelo número total de elementos.

-- ----- ----- -----
08.04. Transformando arrays em representações em string

Nesta aula de Java, vimos como converter arrays para sua representação em String usando a classe Arrays do pacote java.util.
O método Arrays.toString() é utilizado para obter uma representação textual de um array, facilitando a visualização dos seus elementos.
Isso é especialmente útil para imprimir ou registrar em log o conteúdo completo de um array de uma maneira legível.


