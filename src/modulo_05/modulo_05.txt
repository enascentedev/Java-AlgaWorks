## ----- ----- -----

Estudos: Java
Author: Emanuel

-- ----- ----- -----
algoworks
aula 05.01
O paradigma da Programação Orientada a Objetos (POO)
programação orientada a objetos
atributo são as caracteristicas dos objetos.
métodos (ou funções) são ações que o objeto pode executar.

tudo é um objeto menos os tipos primitivos (tipo básico analisar modulo 02 aula 12)
programação funcional os lambdas

-- ----- ----- -----
algoworks
aula 05.02
Entendendo o conceito de classes e objetos

Tudo são objetos deu exemplo do avião(avião é um objeto, passageiros são objetos)
classe são descrição de um conjuntos de objetos de mesmo tipo
atributos: são caracteristicas do objeto
comportamentos: são os métodos (que são igual funções do javascript)
cachorro é classe
raça e cor são atributos
latir morder são os métodos
-- ----- ----- -----

algoworks
aula 05.03

criando classe de carro com atributos

-- ----- ----- -----
algoworks
aula 05.04
instanciar objeto é toda vez que : Cachorro cachorro1= new Cachorro ();

instanciando objetos
instanciou dois objetos , os dois da classe carro, baixou uma extensão do intellij, fez o debuger e instanciu a marca do
carro pelo debugger

-- ----- ----- -----
algoworks
aula 05.05

acessando atributos de objetos
cachorro1.raca = "viralata";

-- ----- ----- -----
algoworks
aula 05.06
padrão UML
-- ----- ----- -----
algoworks
aula 05.07
exercicio
-- ----- ----- -----
algoworks
aula 05.08

composição de objetos, foi criado um relacionanemnto de classes, na classe ele utilizou a classe Pessoa e adicionou
Pessoa proprietaria na classe carro, formando a composição de objetos

-- ----- ----- -----
algoworks
aula 05.09

Atribuindo o objeto da composição
ele mostrou duas váriaves apontando para o mesmo objeto
(fazer exercicios da lista para praticar )

-- ----- ----- -----
algoworks
aula 05.10

Diagrama de classes - associação, agregação e composição
ele mostrou o diagrama de classes de UML

-- ----- ----- -----
algoworks
aula 05.11

Valores padrão e inicialização de variáveis de instância
quando instanciamos um objeto com new as variáveis de instancia são iniciadas com o valor padrão, ele fez exemplos fazendo isso.

-- ----- ----- -----
algoworks
aula 05.12

Inicialização de objetos em variáveis de instância
tentou acessar uma variável que não existia e deu o erro de exception

-- ----- ----- -----
algoworks
aula 05.13
Cachorro cachorro1= new Cachorro();

Caindo a ficha - variáveis referenciam objetos
só revisou as aulas 11 e 12

-- ----- ----- -----
algoworks
aula 05.14

Criando e invocando um método
criou um método (função) void, na classe carro  que não retorna nada com o nome de calcularValorRevenda que imprimi o modelo e ano de fabricação,
depois na classe principal chamou o método para meuCarro e seuCarro.

-- ----- ----- -----

algoworks
aula 05.15

Implementando a lógica do método
criou variavel local na classe carro  double preçoCompra e atribui ela na classe principal.
criou uma variavel local dentro do método int tempoDeUsoEmAnos = 2022
criou uma variavel local valorRevenda = (precoCompra/20) * (20-tempoDeUsoEmAnos); aqui 20 é vidaUtilEmAnos
fez se valorRevenda < 0 então valorRevnda=0 e imprimiu o tempo de uso em anos e valor de revenda(formatado em 6.2)

-- ----- ----- -----
algoworks
aula 05.16

IntelliJ IDEA - debug de chamadas de métodos:
ensinou a usar o debuguer de métodos

-- ----- ----- -----
algoworks
aula 05.17

Métodos com retorno:
trocou o método calcular venda para double tirando o void, deu return no final do método, tirou o imprimir do método na
classe carro e levou para a classe principal.

-- ----- ----- -----
algoworks
aula 05.18

Implementando métodos menores e evitando duplicação de código:
criou metodo int calcularTempoDeUsoEmAnos dentro da classe carro, retornando o 2022 - ano de fabricacao
depois criou um método void para imprimirResumoDepreciacao na classe carro, depois só chamou o método na classe
principal criou o método double calcularIpva que retorna calculoValorRevenda () * 0,04;

-- ----- ----- -----
algoworks
aula 05.19

Saindo do método com a cláusula return
criou uma regra no calculo de ipva se o tempoDeUsoEmAnos for > 10 return 0, pra ficar mais legível ele criou uma
variável int com o valor do método CalcularTempoDeUsoEmAnos.
Depois ele usou o return no método void imprimirResumoDepreciacao, ele fez um if se o precoCompra <=0 imprima a mensagem
"não foi possível imprimir resumo de depreciação" usou o return logo abaixo para sair da função e não executar
as linhas abaixo.

-- ----- ----- -----
algoworks
aula 05.20
Métodos que retornam objetos
criou um projeto novo para calcular imc, com uma classe principal e uma calculadoraImc, criou um método chamado
CalcularIndiceMassaCorporal que retorna um double, criou outra classe chamada IndiceMassaCorporal, nessa classe ele
retorna o resultado o peso e a altura todos double

depois ele faz um if se imc > 30 colocar mensagem de calculadoraImc com altura xx e peso xx está com obesidade

-- ----- ----- -----
algoworks
aula 05.21
Refatorando para tornar uma classe mais rica
não deixar nunca uma classe anemica, criar um método boolean estaComObesidade e um estaAbaixoDoPesoIdeal na classe
indiceMassaCorporal, chamar o método no if da classe principal, nesse método vamos definir quando ele vai retornar
(return resultado >=30;), e na classe principal chamamos o método e imprimi na tela a mensagem conforme o método
-- ----- ----- -----
algoworks
aula 05.22
Discutindo nome e responsabilidade da classe Paciente
renomeou os nomes da classe paciente para CalculadoraImc e mudou o nome do método para Calcular
-- ----- ----- -----
algoworks
aula 05.23
Métodos com argumentos
passou as variavéis como argumento no método CalculadoraImc e na classe principal
-- ----- ----- -----
algoworks
aula 05.24
Passando objetos como argumentos de métodos
-criou uma classe chamada Paciente e declarou duas variavéis de instancia de peso e altura
-Na classe calculadoraImc vamos passar o objeto como parametro para o método, no inicio do parametro sempre declaramos o tipo , que nesse caso
é uma classe (Paciente) o tipo de parametro e em seguida especificamos o nome da variavel que vai ser criada assim que o métodod for infocado
que vai chamar paciente (poderia ser qualquer nome).
- substituir o calculo do imc.resultado= (pra acessar o objeto paciente.peso e paciente.altura)
- Na classe principal vamos declarar uma variável local chamada joão que é um new Paciente
-Depois passamos joão como parametero para o método de IndiceMassaCorporal
-- ----- ----- -----
algoworks
aula 05.25
exercicio

-- ----- ----- -----
algoworks
aula 05.26
Diagrama de  classes - métodos e dependências
fez o diagrama Uml das classes e métodos do programa
-- ----- ----- -----
algoworks
aula 05.27
Métodos que alteram variável de instância
criou outro programa com duas classes,uma chamada principal e outra chamada aeronave
e  criou metodos  como CalcularAssentosDisponiveis, reservarAssentos, que alteram as váriaveis de instancia totalAssentos , assentosResarvados e ativo e desativado
-- ----- ----- -----
algoworks
aula 05.28
Métodos que alteram o valor de parâmetro do tipo primitivo

-- ----- ----- -----
algoworks
aula 05.29
Métodos que alteram o estado de objeto recebido como parâmetro
criou a classe produto.
criou duas variaveis de instancia double precoCusto e precoVenda
apagou o método da classe ServicoDePrecificacao e criou outro método chamado definirPrecoVenda, que vai receber o Produto produto e percentualMargemLucro como parametro
ele vai acessar o objeto produto e fazer a multiplicação produto.precoCusto * ((percentualMargemLucro/100) +1)
rever*
-- ----- ----- -----
algoworks
aula 05.30
Usando a palavra-chave this
explicou o uso de this
na classe Produto invocou o this.precoCusto
-- ----- ----- -----
algoworks
aula 05.31
Atributos de classe com o modificador static
na classe Produto criou uma variável de instancia double custoEmbalagem;
o custo de embalagem deve ser unico  então ele criou o modificador static , sendo assim não é mais uma variável de instancia e sim ima que pertence a classe Produto

-- ----- ----- -----
algoworks
aula 05.32
Método de instância alterando variável estática
reforçou o que foi falado na aula anterior

-- ----- ----- -----
algoworks
aula 05.33
Métodos de classe - estáticos

-- ----- ----- -----
algoworks
aula 05.34
Método estático acessando membro de instância

-- ----- ----- -----
algoworks
Desafio pdf 05.35

-- ----- ----- -----
algoworks
aula 05.36
Declarando constantes com static e final

-- ----- ----- -----
algoworks
aula 05.37
Modificador final em variáveis locais
-- ----- ----- -----
algoworks
aula 05.38
Sobrecarga de métodos
-- ----- ----- -----
algoworks
aula 05.39
Inferência de tipo de variável local

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- -----

-- ----- ----- ----- ##

