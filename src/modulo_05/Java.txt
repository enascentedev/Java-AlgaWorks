## ----- ----- -----

Estudos: Java
Author: Emanuel

## ----- ----- -----
Objetos
O que são? Objetos são instâncias de classes, representando entidades do mundo real com estado (atributos) e comportamento (métodos).
Analogia: Pense em um objeto como um celular. Cada celular (objeto) tem características específicas como marca, modelo e cor (atributos) e pode realizar ações como fazer ligações, enviar mensagens (comportamentos).
Um objeto é uma instância de uma classe. No nosso projeto:
Exemplo: Quando criamos um novo filme com Filme meuFilme = new Filme();, meuFilme é um objeto da classe Filme. Esse objeto tem atributos específicos (como nome, anoDeLancamento) e comportamentos (métodos que definem esses atributos).
-- ----- ----- -----
Classes
O que são? Classes são os "planos" ou "modelos" para criar objetos. Elas definem os atributos e métodos que seus objetos terão.
Analogia: Uma classe é como a planta de uma casa, especificando o design, o número de quartos (atributos) e as funcionalidades que a casa oferece, como abrir a porta, ligar as luzes (métodos).
Classes são os modelos a partir dos quais os objetos são criados.
Exemplo: A classe Filme define o modelo para criar objetos filme, especificando atributos como nome, ano de lançamento e métodos para operar esses atributos.
-- ----- ----- -----
Métodos
O que são? Métodos são funções ou procedimentos associados a uma classe que definem o comportamento dos objetos criados a partir dessa classe.
Analogia: Métodos são como as habilidades ou ações que uma pessoa pode realizar, como correr ou cozinhar. Cada pessoa (objeto) pode realizar essas ações de maneira um pouco diferente.
Métodos definem o comportamento dos objetos.

Exemplo: Na classe Filme, métodos como setNome(String nome) e setAnoDeLancamento(int ano) permitem definir o nome e o ano de lançamento de um objeto filme, respectivamente.

-- ----- ----- -----
Interface
O que são? Interfaces são contratos que especificam um conjunto de métodos que uma classe deve implementar, sem fornecer a implementação real.
Analogia: Imagine uma interface como o menu de um restaurante. O menu oferece uma lista de pratos (métodos) que você pode pedir, mas não diz como esses pratos são preparados (implementação).
Interfaces são contratos que especificam um conjunto de métodos que uma classe deve implementar.

Exemplo: Se tivéssemos uma interface Visualizavel com um método visualizar(), as classes Filme e Serie poderiam implementar essa interface, garantindo que ambos os tipos possam ser visualizados.
-- ----- ----- -----
Herança
O que é? Herança permite que uma classe herde atributos e métodos de outra classe, promovendo a reutilização de código.
Analogia: Pense na herança como a relação genética entre pais e filhos. Os filhos herdam características físicas e comportamentais (atributos e métodos) dos pais.
Herança permite que uma classe herde atributos e métodos de outra classe.

Exemplo: Se tivermos uma classe base Midia com atributos comuns como nome e anoDeLancamento, então Filme e Serie poderiam herdar de Midia, reutilizando esses atributos e comportamentos comuns.
-- ----- ----- -----
Polimorfismo
O que é? Polimorfismo permite que objetos de diferentes classes sejam tratados como objetos de uma classe comum, principalmente através da herança.
Analogia: Polimorfismo é como um aparelho eletrônico universal que pode agir como telefone, rádio, ou televisão, dependendo de como você o usa. Da mesma forma, um objeto em Java pode assumir várias formas.
Polimorfismo permite que objetos de diferentes classes sejam tratados como objetos de uma classe comum.

Exemplo: Se Filme e Serie implementam a interface Visualizavel, podemos ter uma lista de Visualizavel que contém tanto filmes quanto séries, e podemos chamar o método visualizar() em cada um, independentemente de seu tipo concreto.

-- ----- ----- -----
Encapsulamento
O que é? Encapsulamento é o conceito de esconder os detalhes internos de uma classe e expor apenas o necessário ao mundo exterior, geralmente através de métodos públicos.
Analogia: Encapsulamento é como uma cápsula de remédio, que esconde o gosto ruim do medicamento dentro de um invólucro fácil de engolir. Você obtém os benefícios sem precisar ver ou interagir diretamente com o interior.
Encapsulamento esconde os detalhes de implementação de uma classe e expõe apenas o que é necessário.

Exemplo: Em Filme, os atributos como nome e anoDeLancamento são privados, e só podem ser acessados ou modificados através de métodos públicos get e set, protegendo a integridade dos dados.

-- ----- ----- -----
Exercício 1: Criando Classes e Objetos
Objetivo: Praticar a definição de classes e a criação de objetos.

Crie uma classe chamada Carro. Esta classe deve ter atributos como marca, modelo, ano e cor.
Defina métodos para obter e definir o valor de cada atributo (getters e setters).
No método main, crie objetos da classe Carro e utilize os métodos set para atribuir valores a eles, e os métodos get para exibir esses valores.

public class Carro {
    private String marca;
    private String modelo;
    private int ano;
    private String cor;

    // Getters
    public String getMarca() {
        return marca;
    }

    public String getModelo() {
        return modelo;
    }

    public int getAno() {
        return ano;
    }

    public String getCor() {
        return cor;
    }

    // Setters
    public void setMarca(String marca) {
        this.marca = marca;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }

    public void setCor(String cor) {
        this.cor = cor;
    }

    public static void main(String[] args) {
        Carro meuCarro = new Carro();
        meuCarro.setMarca("Toyota");
        meuCarro.setModelo("Corolla");
        meuCarro.setAno(2020);
        meuCarro.setCor("Preto");

        System.out.println("Marca: " + meuCarro.getMarca());
        System.out.println("Modelo: " + meuCarro.getModelo());
        System.out.println("Ano: " + meuCarro.getAno());
        System.out.println("Cor: " + meuCarro.getCor());
    }
}


-- ----- ----- -----
Exercício 2: Implementando uma Interface
Objetivo: Praticar a implementação de interfaces.

Defina uma interface Animal que inclua o método emitirSom.
Crie duas classes que implementem esta interface: Cachorro e Gato. Cada classe deve implementar o método emitirSom para retornar um som característico do animal.
No método main, crie objetos de cada uma das classes implementadas e chame o método emitirSom.

interface Animal {
    void emitirSom();
}

class Cachorro implements Animal {
    public void emitirSom() {
        System.out.println("Au au");
    }
}

class Gato implements Animal {
    public void emitirSom() {
        System.out.println("Miau");
    }
}

public class Principal {
    public static void main(String[] args) {
        Animal meuCachorro = new Cachorro();
        Animal meuGato = new Gato();

        meuCachorro.emitirSom();
        meuGato.emitirSom();
    }
}

-- ----- ----- -----
Exercício 3: Herança
Objetivo: Praticar o uso da herança.

Crie uma classe base Veiculo com atributos comuns como marca, modelo e ano.
Crie classes derivadas como Carro e Moto, que herdam de Veiculo e adicionam atributos específicos.
Demonstre o uso da herança criando objetos das classes derivadas e acessando atributos da classe base e da classe derivada.

class Veiculo {
    protected String marca;
    protected String modelo;
    protected int ano;

    // Getters e Setters omitidos para brevidade
}

class Carro extends Veiculo {
    private int numeroDePortas;

    // Getters e Setters
    // Métodos específicos de Carro
}

class Moto extends Veiculo {
    private boolean temSidecar;

    // Getters e Setters
    // Métodos específicos de Moto
}

// Uso em um método main seria similar ao do Exercício 1, criando instâncias de Carro e Moto.

-- ----- ----- -----

Exercício 4: Polimorfismo
Objetivo: Praticar polimorfismo.

A partir do exercício 2, modifique o método main para criar uma lista de Animal.
Adicione instâncias de Cachorro e Gato à lista.
Percorra a lista, chamando o método emitirSom para cada animal, demonstrando polimorfismo em ação.

// Continuação do Exercício 2
public class TestePolimorfismo {
    public static void main(String[] args) {
        List<Animal> animais = new ArrayList<>();
        animais.add(new Cachorro());
        animais.add(new Gato());

        for (Animal animal : animais) {
            animal.emitirSom();
        }
    }
}

-- ----- ----- -----

Exercício 5: Encapsulamento
Objetivo: Praticar o encapsulamento.

Revise a classe Carro do Exercício 1 para garantir que todos os atributos sejam privados.
Certifique-se de que a única maneira de acessar e modificar esses atributos seja através dos métodos getters e setters.
Demonstre o encapsulamento criando um objeto Carro, tentando acessar diretamente um atributo (deverá resultar em erro), e então acessando-o através de seu método getter.

// A classe Carro do Exercício 1 já demonstra encapsulamento com atributos privados e acesso por getters e setters.
// Aqui, tentaremos acessar diretamente um atributo privado (deve resultar em erro se tentar compilar).

public class TesteEncapsulamento {
    public static void main(String[] args) {
        Carro meuCarro = new Carro();
        // meuCarro.marca = "Ford"; // Erro: marca tem acesso privado em Carro
        meuCarro.setMarca("Ford"); // Correto: usamos o setter para definir a marca
        System.out.println("Marca: " + meuCarro.getMarca()); // Correto: usamos o getter para obter a marca
    }
}


-- ----- ----- -----
algoworks
aula 05.01
programação orientada a objetos
métodos são funções
tudo é um objeto
programação funcional os lambdas

-- ----- ----- -----
algoworks
aula 05.02
Tudo são objetos deu exemplo do avião(avião é um objeto, passageiros são objetos)
classe são descrição de um conjuntos de objetos de mesmo tipo
atributos: são caracteristicas do objeto
comportamentos:
-- ----- ----- -----

algoworks
aula 05.03
criando classe de carro com atributos

-- ----- ----- -----
algoworks
aula 05.04
instanciando objetos
instanciou dois objetos , os dois da classe carro, baixou uma extensão do intellij, fez o debuger e instanciu a marca do carro pelo debugger

-- ----- ----- -----
algoworks
aula 05.05
acessando atributos de objetos
-- ----- ----- -----
algoworks
aula 05.06
padrão UML
-- ----- ----- -----
algoworks
aula 05.07
exercicio
-- ----- ----- -----
algoworks
aula 05.08
composição de objetos, foi criado um relacionanemnto de classes, na classe ele utilizou a classe Pessoa e adicionou Pessoa proprietaria na classe carro,formando a composição de objetos
-- ----- ----- -----
algoworks
aula 05.09
Atribuindo o objeto da composição
ele mostrou duas váriaves apontando para o mesmo objeto e 

-- ----- ----- -----
algoworks
aula 05.10
Diagrama de classes - associação, agregação e composição
ele mostrou o diagrama de classes de UML

-- ----- ----- -----
algoworks
aula 05.11
Valores padrão e inicialização de variáveis de instância

-- ----- ----- -----
algoworks
aula 05.12
05.12. Inicialização de objetos em variáveis de instância

-- ----- ----- -----
algoworks
aula 05.13
05.13. Caindo a ficha - variáveis referenciam objetos

-- ----- ----- -----
aula 05.14
Atribuindo o objeto da composição

-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----
-- ----- ----- -----

-- ----- ----- ----- ##

